name: 🌙 Nightly Quality Checks

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: neonhub_test
  REDIS_URL: redis://localhost:6379

jobs:
  # ============================================================================
  # COMPREHENSIVE E2E TESTING
  # ============================================================================
  comprehensive-e2e:
    name: 🎭 Comprehensive E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 🗄️ Setup database
        run: npm run migrate:dev
        env:
          DATABASE_URL: postgresql://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}

      - name: 🏗️ Build application
        run: npm run build:all

      - name: 🚀 Start application
        run: |
          npm start &
          npx wait-on http://localhost:3000 --timeout 120000
        env:
          DATABASE_URL: postgresql://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          REDIS_URL: ${{ env.REDIS_URL }}

      - name: 🎭 Run E2E tests on ${{ matrix.browser }}
        run: npx playwright test --project=${{ matrix.browser }}

      - name: 📊 Upload E2E results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/

  # ============================================================================
  # PERFORMANCE TESTING
  # ============================================================================
  performance-test:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Setup database
        run: npm run migrate:dev
        env:
          DATABASE_URL: postgresql://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}

      - name: 🏗️ Build application
        run: npm run build:all

      - name: 🚀 Start application
        run: |
          npm start &
          npx wait-on http://localhost:3000 --timeout 120000
        env:
          DATABASE_URL: postgresql://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
          REDIS_URL: ${{ env.REDIS_URL }}

      - name: ⚡ Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: 📊 Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/

  # ============================================================================
  # SECURITY DEEP SCAN
  # ============================================================================
  security-deep-scan:
    name: 🔒 Deep Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🛡️ Run Snyk Deep Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --detection-depth=4

      - name: 🔍 OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'NeonHub'
          path: '.'
          format: 'ALL'

      - name: 📊 Upload OWASP results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-results
          path: reports/

      - name: 🔐 CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ============================================================================
  # DEPENDENCY UPDATES
  # ============================================================================
  dependency-check:
    name: 📦 Dependency Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Check for outdated packages
        run: |
          npm outdated || true
          npm audit --audit-level=moderate

      - name: 📊 Generate dependency report
        run: |
          echo "# 📦 Dependency Health Report" > dependency-report.md
          echo "" >> dependency-report.md
          echo "## Outdated Packages" >> dependency-report.md
          npm outdated --json > outdated.json || true
          echo "\`\`\`json" >> dependency-report.md
          cat outdated.json >> dependency-report.md
          echo "\`\`\`" >> dependency-report.md
          echo "" >> dependency-report.md
          echo "## Security Audit" >> dependency-report.md
          npm audit --json > audit.json || true
          echo "\`\`\`json" >> dependency-report.md
          cat audit.json >> dependency-report.md
          echo "\`\`\`" >> dependency-report.md

      - name: 📊 Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: |
            dependency-report.md
            outdated.json
            audit.json

  # ============================================================================
  # NIGHTLY REPORT
  # ============================================================================
  nightly-report:
    name: 📋 Nightly Quality Report
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      [
        comprehensive-e2e,
        performance-test,
        security-deep-scan,
        dependency-check,
      ]
    if: always()

    steps:
      - name: 📊 Generate Nightly Report
        run: |
          echo "# 🌙 NeonHub Nightly Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎭 E2E Testing" >> $GITHUB_STEP_SUMMARY
          echo "- **Comprehensive E2E**: ${{ needs.comprehensive-e2e.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ⚡ Performance" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Tests**: ${{ needs.performance-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔒 Security" >> $GITHUB_STEP_SUMMARY
          echo "- **Deep Security Scan**: ${{ needs.security-deep-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Check**: ${{ needs.dependency-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.comprehensive-e2e.result }}" == "success" && 
                "${{ needs.performance-test.result }}" == "success" && 
                "${{ needs.security-deep-scan.result }}" == "success" && 
                "${{ needs.dependency-check.result }}" == "success" ]]; then
            echo "## ✅ Overall Status: HEALTHY" >> $GITHUB_STEP_SUMMARY
            echo "All nightly checks passed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Overall Status: NEEDS ATTENTION" >> $GITHUB_STEP_SUMMARY
            echo "Some nightly checks failed. Please review and address." >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔔 Notify team (on failure)
        if: failure()
        run: |
          echo "🚨 Nightly quality checks failed!"
          # Add notification logic here (Slack, email, etc.)
