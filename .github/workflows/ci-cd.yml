name: NeonHub CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: neonhub_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      # Backend lint and test
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      
      - name: Generate Prisma client
        run: |
          cd backend
          npm run prisma:generate
      
      - name: Run backend linting
        run: |
          cd backend
          npm run lint
      
      - name: Run backend tests
        run: |
          cd backend
          npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/neonhub_test
          JWT_SECRET: test_jwt_secret
      
      # Frontend lint and test
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm test
  
  build-and-push:
    name: Build & Push Docker Images
    needs: lint-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Build and push backend image
      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/neonhub-backend:latest
          target: production
      
      # Build and push frontend image
      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/neonhub-frontend:latest
          target: production
  
  deploy:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Deploy to Railway (uncomment if using Railway)
      # - name: Install Railway CLI
      #   run: npm i -g @railway/cli
      #
      # - name: Deploy to Railway
      #   run: railway up
      #   env:
      #     RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      # Deploy to Render (uncomment if using Render)
      # - name: Deploy to Render
      #   run: |
      #     curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
      
      # Deploy to AWS ECS (uncomment if using AWS ECS)
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}
      #
      # - name: Update ECS service
      #   run: |
      #     aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} --service ${{ secrets.ECS_SERVICE }} --force-new-deployment
      
      - name: Deployment status
        run: echo "Deployment to selected platform completed" 