{
  "agents": {
    "architecture": {
      "name": "NeonHub Architecture Agent",
      "description": "Continuously owns and evolves the high-level design of NeonHub",
      "triggers": [
        "on_push_to_main",
        "schedule=\"*/5 * * * *\"",
        "on_architecture_file_change"
      ],
      "responsibilities": [
        "Analyze changed files and update architecture.md",
        "Validate consistency between data models and service boundaries",
        "Break down feature requests into sub-tasks",
        "Maintain sequence diagrams and component relationships",
        "Auto-commit changes immediately after making fixes"
      ],
      "files_monitored": [
        "architecture.md",
        "IMPLEMENTATION_PLAN.md", 
        "PROJECT_OVERVIEW.md",
        "backend/src/**/*.ts",
        "frontend/src/**/*.tsx"
      ],
      "commit_prefix": "docs(arch):",
      "auto_commit": {
        "enabled": true,
        "stage_all": true,
        "push_immediately": true,
        "commit_message_template": "docs(arch): auto-update architecture - {{timestamp}}"
      },
      "failure_handling": {
        "max_consecutive_failures": 2,
        "escalation_action": "create_github_issue",
        "pause_on_failure": true,
        "retry_delay_minutes": 15
      },
      "quality_gates": {
        "markdown_lint": "markdownlint architecture.md",
        "consistency_check": "node scripts/validate-architecture.js"
      }
    },
    "backend": {
      "name": "NeonHub Backend Agent",
      "description": "Maintains backend code quality, API consistency, and test coverage",
      "triggers": [
        "on_backend_change",
        "on_push_to_main",
        "schedule=\"*/5 * * * *\""
      ],
      "responsibilities": [
        "Scan for new or modified API endpoints and services",
        "Scaffold missing routes with TypeScript and JSDoc",
        "Generate or update Jest unit tests",
        "Ensure strict typing and linting compliance",
        "Auto-fix lint errors and immediately commit",
        "Generate missing test files for uncovered code"
      ],
      "files_monitored": [
        "backend/**/*.ts",
        "backend/prisma/**/*",
        "backend/package.json",
        "backend/**/*.test.ts"
      ],
      "commit_prefix": "fix(backend):|feat(backend):",
      "auto_commit": {
        "enabled": true,
        "stage_all": true,
        "push_immediately": true,
        "commit_message_template": "{{prefix}} auto-lint and test fixes - {{timestamp}}"
      },
      "failure_handling": {
        "max_consecutive_failures": 2,
        "escalation_action": "create_github_issue",
        "pause_on_failure": true,
        "retry_delay_minutes": 10
      },
      "quality_gates": {
        "lint": "npm run lint -- --fix",
        "test": "npm test",
        "type_check": "npx tsc --noEmit --strict",
        "coverage_check": "npm run test:coverage"
      }
    },
    "frontend": {
      "name": "NeonHub Frontend Agent", 
      "description": "Maintains UI/UX consistency, component quality, and frontend tests",
      "triggers": [
        "on_frontend_change",
        "on_push_to_main",
        "schedule=\"*/5 * * * *\""
      ],
      "responsibilities": [
        "Detect added or modified UI routes and components",
        "Scaffold React + Next.js pages with shadcn/ui",
        "Generate React Testing Library tests",
        "Maintain styling consistency and accessibility",
        "Auto-fix lint errors and immediately commit",
        "Ensure TypeScript compliance in components"
      ],
      "files_monitored": [
        "frontend/**/*.tsx",
        "frontend/**/*.ts",
        "frontend/src/components/**/*",
        "frontend/package.json",
        "frontend/**/*.test.tsx"
      ],
      "commit_prefix": "fix(frontend):|feat(frontend):",
      "auto_commit": {
        "enabled": true,
        "stage_all": true,
        "push_immediately": true,
        "commit_message_template": "{{prefix}} auto-lint and component fixes - {{timestamp}}"
      },
      "failure_handling": {
        "max_consecutive_failures": 2,
        "escalation_action": "create_github_issue",
        "pause_on_failure": true,
        "retry_delay_minutes": 10
      },
      "quality_gates": {
        "lint": "npm run lint -- --fix",
        "test": "npm test",
        "type_check": "npx tsc --noEmit --strict",
        "build": "npm run build"
      }
    },
    "devops": {
      "name": "NeonHub DevOps Agent",
      "description": "Ensures CI/CD pipeline health and infrastructure reliability",
      "triggers": [
        "on_push_to_main",
        "on_workflow_change",
        "on_docker_change",
        "schedule=\"*/5 * * * *\""
      ],
      "responsibilities": [
        "Validate GitHub Actions workflows and Docker files",
        "Simulate CI steps locally",
        "Add caching and optimization strategies",
        "Monitor deployment health and security",
        "Auto-fix YAML syntax errors and commit immediately",
        "Update Docker configurations for security"
      ],
      "files_monitored": [
        ".github/workflows/**/*.yml",
        "docker-compose*.yml",
        "**/Dockerfile",
        "kubernetes/**/*",
        "scripts/**/*"
      ],
      "commit_prefix": "ci:|chore(devops):",
      "auto_commit": {
        "enabled": true,
        "stage_all": true,
        "push_immediately": true,
        "commit_message_template": "{{prefix}} auto-fix CI/CD and infrastructure - {{timestamp}}"
      },
      "failure_handling": {
        "max_consecutive_failures": 2,
        "escalation_action": "create_github_issue",
        "pause_on_failure": true,
        "retry_delay_minutes": 15
      },
      "quality_gates": {
        "yaml_lint": "yamllint .github/workflows/ || true",
        "docker_validate": "docker-compose config || true",
        "security_scan": "trivy fs . || true"
      }
    },
    "qa": {
      "name": "NeonHub QA Agent",
      "description": "Maintains test coverage, quality metrics, and regression prevention",
      "triggers": [
        "on_push_to_main",
        "on_test_change",
        "schedule=\"*/5 * * * *\"",
        "schedule_nightly=\"0 2 * * *\""
      ],
      "responsibilities": [
        "Audit coverage diffs for backend and frontend",
        "Auto-generate missing unit/integration tests",
        "Run E2E tests against critical flows (nightly)",
        "Report regressions and edge cases",
        "Auto-commit generated tests immediately",
        "Monitor test performance and reliability"
      ],
      "files_monitored": [
        "**/*.test.ts",
        "**/*.spec.ts",
        "**/*.test.tsx",
        "backend/src/**/*.ts",
        "frontend/src/**/*.tsx"
      ],
      "commit_prefix": "test:",
      "auto_commit": {
        "enabled": true,
        "stage_all": true,
        "push_immediately": true,
        "commit_message_template": "test: auto-generate missing tests and coverage fixes - {{timestamp}}"
      },
      "failure_handling": {
        "max_consecutive_failures": 2,
        "escalation_action": "create_github_issue",
        "pause_on_failure": true,
        "retry_delay_minutes": 20
      },
      "schedule_config": {
        "frequent_checks": {
          "cron": "*/5 * * * *",
          "actions": ["unit_tests", "integration_tests", "coverage_check"]
        },
        "nightly_full": {
          "cron": "0 2 * * *",
          "actions": ["full_e2e_suite", "performance_tests", "regression_tests"]
        }
      },
      "quality_gates": {
        "coverage_threshold": 90,
        "unit_tests": "npm run test",
        "integration_tests": "npm run test:integration || true",
        "e2e_tests_nightly": "npx playwright test || true"
      }
    },
    "docs": {
      "name": "NeonHub Documentation Agent",
      "description": "Keeps documentation synchronized with code and processes",
      "triggers": [
        "on_push_to_main",
        "on_docs_change",
        "on_api_change",
        "schedule=\"*/5 * * * *\""
      ],
      "responsibilities": [
        "Sync README.md and developer guides with code changes",
        "Generate/update OpenAPI/Swagger docs",
        "Verify markdown lint and link validity",
        "Maintain API documentation consistency",
        "Auto-commit documentation updates immediately",
        "Generate changelog entries for releases"
      ],
      "files_monitored": [
        "**/*.md",
        "docs/**/*",
        "backend/src/routes/**/*.ts",
        "README.md",
        "CHANGELOG.md"
      ],
      "commit_prefix": "docs:|chore(docs):",
      "auto_commit": {
        "enabled": true,
        "stage_all": true,
        "push_immediately": true,
        "commit_message_template": "{{prefix}} auto-update documentation - {{timestamp}}"
      },
      "failure_handling": {
        "max_consecutive_failures": 2,
        "escalation_action": "create_github_issue",
        "pause_on_failure": true,
        "retry_delay_minutes": 15
      },
      "quality_gates": {
        "markdown_lint": "markdownlint **/*.md || true",
        "link_check": "markdown-link-check **/*.md || true",
        "api_docs": "swagger-jsdoc backend/src/routes/**/*.ts || true"
      }
    }
  },
  "global_settings": {
    "git_config": {
      "user_name": "NeonHub Agent Optimizer",
      "user_email": "agents@neonhub.com"
    },
    "commit_strategy": {
      "immediate_commit": true,
      "auto_push": true,
      "prevent_loops": true,
      "commit_hook_bypass": true
    },
    "notification_channels": [
      "github_issues",
      "slack_webhook"
    ],
    "quality_standards": {
      "min_test_coverage": 90,
      "max_complexity": 10,
      "required_docs": ["README.md", "architecture.md", "API.md"]
    },
    "automation_rules": {
      "auto_fix_lint": true,
      "auto_generate_tests": true,
      "auto_update_docs": true,
      "immediate_commit_on_fix": true,
      "require_approval_for": ["breaking_changes", "security_updates"]
    },
    "escalation_settings": {
      "github_issue_template": {
        "title": "Agent {{agent_name}} failing",
        "labels": ["bug", "agent-failure", "urgent"],
        "assignees": ["@neonhub/engineering"],
        "body_template": "**Agent**: {{agent_name}}\n**Failure Count**: {{failure_count}}\n**Last Error**: {{last_error}}\n**Timestamp**: {{timestamp}}\n\n**Error Log**:\n```\n{{error_log}}\n```\n\n**Manual Review Required**"
      }
    }
  },
  "workflows": {
    "on_push_to_main": {
      "sequence": [
        "architecture",
        "backend",
        "frontend", 
        "qa",
        "docs",
        "devops"
      ],
      "parallel_execution": false,
      "failure_strategy": "continue_on_error",
      "immediate_execution": true
    },
    "on_pull_request": {
      "sequence": [
        "backend",
        "frontend",
        "qa"
      ],
      "parallel_execution": true,
      "failure_strategy": "fail_fast"
    },
    "scheduled_frequent": {
      "cron": "*/5 * * * *",
      "sequence": [
        "backend",
        "frontend",
        "qa",
        "devops",
        "docs",
        "architecture"
      ],
      "parallel_execution": true,
      "timeout_minutes": 15
    },
    "scheduled_nightly": {
      "cron": "0 2 * * *",
      "sequence": [
        "qa",
        "devops",
        "docs"
      ],
      "parallel_execution": false,
      "includes_full_e2e": true
    }
  }
} 