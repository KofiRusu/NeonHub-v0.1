# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []

# Backend configuration
backend:
  enabled: true
  replicaCount: 2
  image:
    repository: neonhub-backend
    tag: latest
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 80
    targetPort: 5000
  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  env:
    - name: NODE_ENV
      value: production
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    path: /api/health
  readinessProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 5
    path: /api/health
  
# Frontend configuration
frontend:
  enabled: true
  replicaCount: 2
  image:
    repository: neonhub-frontend
    tag: latest
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  env:
    - name: NODE_ENV
      value: production
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    path: /
  readinessProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 5
    path: /

# Orchestrator configuration
orchestrator:
  enabled: true
  replicaCount: 1
  image:
    repository: neonhub-orchestrator
    tag: latest
    pullPolicy: Always
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  env:
    - name: NODE_ENV
      value: production
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    path: /health
  readinessProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 5
    path: /health

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: app.neonhub.io
      paths:
        - path: /
          pathType: Prefix
          service: frontend
        - path: /api
          pathType: Prefix
          service: backend
  tls:
    - secretName: neonhub-tls
      hosts:
        - app.neonhub.io

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    username: neonhub
    password: ""
    database: neonhub
  primary:
    persistence:
      enabled: true
      size: 10Gi

# Redis configuration
redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: true
    password: ""
  master:
    persistence:
      enabled: true
      size: 5Gi

# Persistence for uploads
persistence:
  uploads:
    enabled: true
    size: 10Gi
    storageClass: ""
    accessModes:
      - ReadWriteMany

# Secret configuration
secrets:
  create: true
  jwtSecret: ""
  openaiApiKey: "" 