version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-neonhub}
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
    ports:
      - '${POSTGRES_PORT:-5434}:5432'
    networks:
      - neonhub_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API Service
  backend:
    build:
      context: ./backend
      target: ${NODE_ENV:-development}
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - '${BACKEND_PORT:-5001}:${PORT:-5000}'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-neonhub}?schema=public
      - PORT=${PORT:-5000}
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLIENT_URL=http://localhost:3000
      - CORS_ORIGIN=http://localhost:3000
    networks:
      - neonhub_network
    restart: unless-stopped
    command: sh -c "npm run prisma:migrate:deploy && npm run dev"

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      target: ${NODE_ENV:-development}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=http://localhost:${BACKEND_PORT:-5001}
    depends_on:
      - backend
    networks:
      - neonhub_network
    restart: unless-stopped

networks:
  neonhub_network:
    driver: bridge

volumes:
  postgres_data: {}
