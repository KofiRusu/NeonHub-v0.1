
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  role: 'role',
  avatar: 'avatar',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  dueDate: 'dueDate',
  projectId: 'projectId',
  assigneeId: 'assigneeId',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  projectId: 'projectId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  fileUrl: 'fileUrl',
  fileType: 'fileType',
  fileSize: 'fileSize',
  projectId: 'projectId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AIAgentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  agentType: 'agentType',
  configuration: 'configuration',
  lastRunAt: 'lastRunAt',
  nextRunAt: 'nextRunAt',
  scheduleExpression: 'scheduleExpression',
  scheduleEnabled: 'scheduleEnabled',
  status: 'status',
  projectId: 'projectId',
  managerId: 'managerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgentExecutionSessionScalarFieldEnum = {
  id: 'id',
  agentId: 'agentId',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  success: 'success',
  duration: 'duration',
  outputSummary: 'outputSummary',
  logs: 'logs',
  context: 'context',
  metrics: 'metrics',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  campaignType: 'campaignType',
  goals: 'goals',
  targeting: 'targeting',
  budget: 'budget',
  startDate: 'startDate',
  endDate: 'endDate',
  ownerId: 'ownerId',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GeneratedContentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  contentType: 'contentType',
  platform: 'platform',
  status: 'status',
  metadata: 'metadata',
  agentId: 'agentId',
  campaignId: 'campaignId',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OutreachTaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  outreachType: 'outreachType',
  status: 'status',
  leadInfo: 'leadInfo',
  contactMethod: 'contactMethod',
  aiResponse: 'aiResponse',
  responseHandlerId: 'responseHandlerId',
  campaignId: 'campaignId',
  scheduledAt: 'scheduledAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrendSignalScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  source: 'source',
  signalType: 'signalType',
  confidence: 'confidence',
  rawData: 'rawData',
  impact: 'impact',
  agentId: 'agentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IntegrationCredentialScalarFieldEnum = {
  id: 'id',
  platform: 'platform',
  accountIdentifier: 'accountIdentifier',
  authToken: 'authToken',
  refreshToken: 'refreshToken',
  tokenType: 'tokenType',
  expiry: 'expiry',
  scopes: 'scopes',
  metadata: 'metadata',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MetricScalarFieldEnum = {
  id: 'id',
  name: 'name',
  source: 'source',
  value: 'value',
  unit: 'unit',
  dimension: 'dimension',
  campaignId: 'campaignId',
  projectId: 'projectId',
  timestamp: 'timestamp',
  metadata: 'metadata'
};

exports.Prisma.PersonalizationProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  behaviorCluster: 'behaviorCluster',
  interestAffinity: 'interestAffinity',
  engagementScore: 'engagementScore',
  contentPreferences: 'contentPreferences',
  activeHours: 'activeHours',
  devicePreference: 'devicePreference',
  clickPatterns: 'clickPatterns',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  channel: 'channel',
  content: 'content',
  sentiment: 'sentiment',
  sourceType: 'sourceType',
  sourceId: 'sourceId',
  userId: 'userId',
  contentId: 'contentId',
  outreachTaskId: 'outreachTaskId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.TaskStatus = {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  REVIEW: 'REVIEW',
  DONE: 'DONE'
};

exports.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.AgentType = {
  CONTENT_CREATOR: 'CONTENT_CREATOR',
  TREND_ANALYZER: 'TREND_ANALYZER',
  OUTREACH_MANAGER: 'OUTREACH_MANAGER',
  PERFORMANCE_OPTIMIZER: 'PERFORMANCE_OPTIMIZER',
  AUDIENCE_RESEARCHER: 'AUDIENCE_RESEARCHER',
  COPYWRITER: 'COPYWRITER',
  SOCIAL_MEDIA_MANAGER: 'SOCIAL_MEDIA_MANAGER',
  EMAIL_MARKETER: 'EMAIL_MARKETER',
  SEO_SPECIALIST: 'SEO_SPECIALIST',
  CUSTOMER_SUPPORT: 'CUSTOMER_SUPPORT'
};

exports.AgentStatus = {
  IDLE: 'IDLE',
  RUNNING: 'RUNNING',
  ERROR: 'ERROR',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED'
};

exports.CampaignStatus = {
  DRAFT: 'DRAFT',
  SCHEDULED: 'SCHEDULED',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED'
};

exports.CampaignType = {
  SOCIAL_MEDIA: 'SOCIAL_MEDIA',
  EMAIL: 'EMAIL',
  CONTENT_MARKETING: 'CONTENT_MARKETING',
  SEO: 'SEO',
  PPC: 'PPC',
  INFLUENCER: 'INFLUENCER',
  AFFILIATE: 'AFFILIATE',
  EVENT: 'EVENT',
  PR: 'PR',
  INTEGRATED: 'INTEGRATED'
};

exports.ContentType = {
  BLOG_POST: 'BLOG_POST',
  SOCIAL_POST: 'SOCIAL_POST',
  EMAIL: 'EMAIL',
  AD_COPY: 'AD_COPY',
  LANDING_PAGE: 'LANDING_PAGE',
  VIDEO_SCRIPT: 'VIDEO_SCRIPT',
  PRODUCT_DESCRIPTION: 'PRODUCT_DESCRIPTION',
  PRESS_RELEASE: 'PRESS_RELEASE',
  NEWSLETTER: 'NEWSLETTER',
  INFOGRAPHIC: 'INFOGRAPHIC'
};

exports.Platform = {
  FACEBOOK: 'FACEBOOK',
  INSTAGRAM: 'INSTAGRAM',
  TWITTER: 'TWITTER',
  LINKEDIN: 'LINKEDIN',
  TIKTOK: 'TIKTOK',
  YOUTUBE: 'YOUTUBE',
  WEBSITE: 'WEBSITE',
  EMAIL: 'EMAIL',
  GOOGLE: 'GOOGLE',
  PINTEREST: 'PINTEREST'
};

exports.ContentStatus = {
  DRAFT: 'DRAFT',
  REVIEW: 'REVIEW',
  APPROVED: 'APPROVED',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED',
  REJECTED: 'REJECTED'
};

exports.OutreachType = {
  COLD_EMAIL: 'COLD_EMAIL',
  SOCIAL_OUTREACH: 'SOCIAL_OUTREACH',
  FOLLOW_UP: 'FOLLOW_UP',
  DEMO_REQUEST: 'DEMO_REQUEST',
  PARTNERSHIP: 'PARTNERSHIP',
  INFLUENCER_OUTREACH: 'INFLUENCER_OUTREACH',
  CUSTOMER_REENGAGEMENT: 'CUSTOMER_REENGAGEMENT',
  LEAD_QUALIFICATION: 'LEAD_QUALIFICATION'
};

exports.OutreachStatus = {
  PENDING: 'PENDING',
  SCHEDULED: 'SCHEDULED',
  SENT: 'SENT',
  RESPONDED: 'RESPONDED',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.ContactMethod = {
  EMAIL: 'EMAIL',
  LINKEDIN: 'LINKEDIN',
  TWITTER: 'TWITTER',
  PHONE: 'PHONE',
  INSTAGRAM: 'INSTAGRAM',
  FACEBOOK: 'FACEBOOK',
  IN_PERSON: 'IN_PERSON',
  OTHER: 'OTHER'
};

exports.SignalType = {
  KEYWORD_TREND: 'KEYWORD_TREND',
  TOPIC_EMERGENCE: 'TOPIC_EMERGENCE',
  SENTIMENT_SHIFT: 'SENTIMENT_SHIFT',
  COMPETITION_MOVE: 'COMPETITION_MOVE',
  INDUSTRY_NEWS: 'INDUSTRY_NEWS',
  REGULATORY_CHANGE: 'REGULATORY_CHANGE',
  VIRAL_CONTENT: 'VIRAL_CONTENT',
  MARKET_OPPORTUNITY: 'MARKET_OPPORTUNITY'
};

exports.TrendImpact = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.FeedbackChannel = {
  IN_APP: 'IN_APP',
  EMAIL: 'EMAIL',
  SURVEY: 'SURVEY',
  SOCIAL_MEDIA: 'SOCIAL_MEDIA',
  CUSTOMER_SUPPORT: 'CUSTOMER_SUPPORT',
  REVIEW: 'REVIEW'
};

exports.Sentiment = {
  VERY_NEGATIVE: 'VERY_NEGATIVE',
  NEGATIVE: 'NEGATIVE',
  NEUTRAL: 'NEUTRAL',
  POSITIVE: 'POSITIVE',
  VERY_POSITIVE: 'VERY_POSITIVE'
};

exports.FeedbackSource = {
  CONTENT: 'CONTENT',
  OUTREACH: 'OUTREACH',
  CAMPAIGN: 'CAMPAIGN',
  PLATFORM: 'PLATFORM',
  AGENT: 'AGENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Project: 'Project',
  Task: 'Task',
  Message: 'Message',
  Document: 'Document',
  AIAgent: 'AIAgent',
  AgentExecutionSession: 'AgentExecutionSession',
  Campaign: 'Campaign',
  GeneratedContent: 'GeneratedContent',
  OutreachTask: 'OutreachTask',
  TrendSignal: 'TrendSignal',
  IntegrationCredential: 'IntegrationCredential',
  Metric: 'Metric',
  PersonalizationProfile: 'PersonalizationProfile',
  Feedback: 'Feedback'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
