import { PrismaClient, AgentType, AgentStatus, CampaignType, CampaignStatus } from '@prisma/client';
import { DeepMockProxy } from 'jest-mock-extended';
export declare const prisma: DeepMockProxy<PrismaClient<import(".prisma/client").Prisma.PrismaClientOptions, never, import(".prisma/client").Prisma.RejectOnNotFound | import(".prisma/client").Prisma.RejectPerOperation | undefined, import("@prisma/client/runtime").DefaultArgs>>;
export declare const generateId: () => string;
export declare const createTestAgent: (overrides?: {}) => {
    id: string;
    name: string;
    description: string;
    agentType: AgentType;
    status: AgentStatus;
    configuration: {};
    projectId: string;
    managerId: string;
    lastRunAt: null;
    nextRunAt: null;
    scheduleExpression: null;
    scheduleEnabled: boolean;
    createdAt: Date;
    updatedAt: Date;
};
export declare const createTestCampaign: (overrides?: {}) => {
    id: string;
    name: string;
    description: string;
    status: CampaignStatus;
    campaignType: CampaignType;
    goals: {};
    targeting: {};
    budget: null;
    startDate: null;
    endDate: null;
    projectId: string;
    ownerId: string;
    createdAt: Date;
    updatedAt: Date;
};
export declare const createTestMetric: (overrides?: {}) => {
    id: string;
    name: string;
    value: number;
    source: string;
    unit: string;
    dimension: null;
    campaignId: null;
    projectId: string;
    metadata: {};
    timestamp: Date;
};
export declare const createTestExecutionSession: (overrides?: {}) => {
    id: string;
    agentId: string;
    startedAt: Date;
    completedAt: null;
    success: null;
    duration: null;
    outputSummary: null;
    logs: never[];
    context: {};
    metrics: {};
    errorMessage: null;
    createdAt: Date;
};
export type MockPrismaClient = DeepMockProxy<PrismaClient>;
