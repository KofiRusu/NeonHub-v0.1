// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== CORE MODELS ====================

// Represents a user of the platform
model User {
  id                    String                  @id @default(uuid())
  email                 String                  @unique
  name                  String
  password              String
  role                  Role                    @default(USER)
  avatar                String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  projects              Project[]               @relation("ProjectMembers")
  ownedProjects         Project[]               @relation("ProjectOwner")
  tasks                 Task[]                  @relation("TaskAssignee")
  createdTasks          Task[]                  @relation("TaskCreator")
  messages              Message[]
  documents             Document[]
  // New relations for AI Marketing
  campaigns             Campaign[]              @relation("CampaignOwner")
  managedAgents         AIAgent[]               @relation("AgentManager")
  feedback              Feedback[]
  personalizationProfile PersonalizationProfile?
  outreachResponses     OutreachTask[]          @relation("ResponseHandler")
  createdContent        GeneratedContent[]      @relation("ContentCreator")
  integrationCredentials IntegrationCredential[]
}

enum Role {
  USER
  ADMIN
}

// Represents a project or workspace
model Project {
  id                String          @id @default(uuid())
  name              String
  description       String?
  ownerId           String
  owner             User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  members           User[]          @relation("ProjectMembers")
  tasks             Task[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  messages          Message[]
  documents         Document[]
  // New relations for AI Marketing
  campaigns         Campaign[]
  aiAgents          AIAgent[]
  metrics           Metric[]

  @@index([ownerId])
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId  String?
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creatorId   String
  creator     User       @relation("TaskCreator", fields: [creatorId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@index([projectId])
  @@index([assigneeId])
  @@index([creatorId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Message {
  id        String   @id @default(uuid())
  content   String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([projectId])
  @@index([userId])
}

model Document {
  id          String   @id @default(uuid())
  name        String
  description String?
  fileUrl     String
  fileType    String
  fileSize    Int
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([projectId])
  @@index([userId])
}

// ==================== AI MARKETING ECOSYSTEM MODELS ====================

// Represents an AI agent with specific capabilities
model AIAgent {
  id             String             @id @default(uuid())
  name           String
  description    String?
  agentType      AgentType
  configuration  Json               // Stores agent-specific configuration
  lastRunAt      DateTime?
  nextRunAt      DateTime?          // When the agent is next scheduled to run
  scheduleExpression String?        // Cron expression or interval for scheduling
  scheduleEnabled Boolean           @default(false)  // Whether scheduling is enabled
  status         AgentStatus        @default(IDLE)
  projectId      String
  project        Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  managerId      String
  manager        User               @relation("AgentManager", fields: [managerId], references: [id])
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  // Relations
  generatedContent GeneratedContent[]
  campaigns      Campaign[]         @relation("CampaignAgents")
  trendSignals   TrendSignal[]
  executionSessions AgentExecutionSession[]
  
  @@index([projectId])
  @@index([managerId])
  @@index([agentType])
  @@index([status])
  @@index([nextRunAt])  // Index for efficient scheduled agent queries
}

// New model for tracking agent execution sessions
model AgentExecutionSession {
  id              String         @id @default(uuid())
  agentId         String
  agent           AIAgent        @relation(fields: [agentId], references: [id])
  startedAt       DateTime       @default(now())
  completedAt     DateTime?
  success         Boolean?       // null means still running
  duration        Int?           // in milliseconds
  outputSummary   String?        @db.Text
  logs            Json?          // Stored log entries
  context         Json?          // Input context for the run
  metrics         Json?          // Performance metrics
  errorMessage    String?        @db.Text
  createdAt       DateTime       @default(now())

  @@index([agentId])
  @@index([startedAt])
  @@index([success])
}

enum AgentType {
  CONTENT_CREATOR
  TREND_ANALYZER
  OUTREACH_MANAGER
  PERFORMANCE_OPTIMIZER
  AUDIENCE_RESEARCHER
  COPYWRITER
  SOCIAL_MEDIA_MANAGER
  EMAIL_MARKETER
  SEO_SPECIALIST
  CUSTOMER_SUPPORT
}

enum AgentStatus {
  IDLE
  RUNNING
  ERROR
  PAUSED
  COMPLETED
}

// Represents a marketing campaign
model Campaign {
  id              String            @id @default(uuid())
  name            String
  description     String?
  status          CampaignStatus    @default(DRAFT)
  campaignType    CampaignType
  goals           Json              // Store campaign goals as structured data
  targeting       Json              // Store targeting criteria as structured data
  budget          Float?
  startDate       DateTime?
  endDate         DateTime?
  ownerId         String
  owner           User              @relation("CampaignOwner", fields: [ownerId], references: [id])
  projectId       String
  project         Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  // Relations
  agents          AIAgent[]         @relation("CampaignAgents")
  generatedContent GeneratedContent[]
  outreachTasks   OutreachTask[]
  metrics         Metric[]
  
  @@index([ownerId])
  @@index([projectId])
  @@index([status])
  @@index([campaignType])
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum CampaignType {
  SOCIAL_MEDIA
  EMAIL
  CONTENT_MARKETING
  SEO
  PPC
  INFLUENCER
  AFFILIATE
  EVENT
  PR
  INTEGRATED
}

// Represents content generated by AI agents
model GeneratedContent {
  id            String            @id @default(uuid())
  title         String
  content       String            @db.Text
  contentType   ContentType
  platform      Platform?
  status        ContentStatus     @default(DRAFT)
  metadata      Json?             // Additional content metadata
  agentId       String
  agent         AIAgent           @relation(fields: [agentId], references: [id])
  campaignId    String?
  campaign      Campaign?         @relation(fields: [campaignId], references: [id])
  creatorId     String?           // Optional human creator/editor
  creator       User?             @relation("ContentCreator", fields: [creatorId], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  // Relations
  feedback      Feedback[]        @relation("ContentFeedback")
  
  @@index([agentId])
  @@index([campaignId])
  @@index([creatorId])
  @@index([contentType])
  @@index([platform])
  @@index([status])
}

enum ContentType {
  BLOG_POST
  SOCIAL_POST
  EMAIL
  AD_COPY
  LANDING_PAGE
  VIDEO_SCRIPT
  PRODUCT_DESCRIPTION
  PRESS_RELEASE
  NEWSLETTER
  INFOGRAPHIC
}

enum Platform {
  FACEBOOK
  INSTAGRAM
  TWITTER
  LINKEDIN
  TIKTOK
  YOUTUBE
  WEBSITE
  EMAIL
  GOOGLE
  PINTEREST
}

enum ContentStatus {
  DRAFT
  REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED
  REJECTED
}

// Represents outreach tasks for lead generation and follow-up
model OutreachTask {
  id              String            @id @default(uuid())
  title           String
  description     String?
  outreachType    OutreachType
  status          OutreachStatus    @default(PENDING)
  leadInfo        Json              // Contact info and details about the lead
  contactMethod   ContactMethod
  aiResponse      String?           @db.Text
  responseHandlerId String?
  responseHandler User?             @relation("ResponseHandler", fields: [responseHandlerId], references: [id])
  campaignId      String
  campaign        Campaign          @relation(fields: [campaignId], references: [id])
  scheduledAt     DateTime?
  completedAt     DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  // Relations
  feedback        Feedback[]        @relation("OutreachFeedback")
  
  @@index([campaignId])
  @@index([outreachType])
  @@index([status])
  @@index([responseHandlerId])
}

enum OutreachType {
  COLD_EMAIL
  SOCIAL_OUTREACH
  FOLLOW_UP
  DEMO_REQUEST
  PARTNERSHIP
  INFLUENCER_OUTREACH
  CUSTOMER_REENGAGEMENT
  LEAD_QUALIFICATION
}

enum OutreachStatus {
  PENDING
  SCHEDULED
  SENT
  RESPONDED
  COMPLETED
  FAILED
}

enum ContactMethod {
  EMAIL
  LINKEDIN
  TWITTER
  PHONE
  INSTAGRAM
  FACEBOOK
  IN_PERSON
  OTHER
}

// Represents trend analysis signals from AI agents
model TrendSignal {
  id              String          @id @default(uuid())
  title           String
  description     String
  source          String          // Where the trend was detected
  signalType      SignalType
  confidence      Float           // 0.0 to 1.0 confidence score
  rawData         Json?           // Raw data from the source
  impact          TrendImpact     @default(MEDIUM)
  agentId         String
  agent           AIAgent         @relation(fields: [agentId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([agentId])
  @@index([signalType])
  @@index([impact])
  @@index([createdAt]) // Index for time-based queries
}

enum SignalType {
  KEYWORD_TREND
  TOPIC_EMERGENCE
  SENTIMENT_SHIFT
  COMPETITION_MOVE
  INDUSTRY_NEWS
  REGULATORY_CHANGE
  VIRAL_CONTENT
  MARKET_OPPORTUNITY
  INSIGHT
}

enum TrendImpact {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Represents integration credentials for third-party platforms
model IntegrationCredential {
  id              String         @id @default(uuid())
  platform        String         // Name of the integrated platform
  accountIdentifier String?      // Username, account ID, etc.
  authToken       String         @db.Text
  refreshToken    String?        @db.Text
  tokenType       String?
  expiry          DateTime?
  scopes          String[]
  metadata        Json?          // Additional platform-specific metadata
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@index([userId])
  @@index([platform])
  @@index([expiry]) // For token refresh jobs
  @@unique([userId, platform, accountIdentifier]) // Prevent duplicate credentials
}

// Represents marketing performance metrics
model Metric {
  id              String         @id @default(uuid())
  name            String
  source          String         // Where the metric comes from
  value           Float
  unit            String?        // e.g., "percent", "count", "dollars"
  dimension       String?        // Optional dimension for the metric
  campaignId      String?
  campaign        Campaign?      @relation(fields: [campaignId], references: [id])
  projectId       String?
  project         Project?       @relation(fields: [projectId], references: [id])
  timestamp       DateTime       @default(now())
  metadata        Json?          // Additional metric context
  
  @@index([campaignId])
  @@index([projectId])
  @@index([source])
  @@index([name])
  @@index([timestamp]) // For time-series analysis
}

// Represents personalization profiles for users
model PersonalizationProfile {
  id              String         @id @default(uuid())
  userId          String         @unique
  user            User           @relation(fields: [userId], references: [id])
  behaviorCluster String         // Categorization of user behavior
  interestAffinity Json          // Mapped interests and their scores
  engagementScore Float          // Overall engagement score
  contentPreferences Json        // Preferred content types and formats
  activeHours     Json?          // When the user is most active
  devicePreference String?       // Preferred device
  clickPatterns   Json?          // Analysis of click behavior
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@index([userId])
  @@index([behaviorCluster])
  @@index([engagementScore])
}

// Represents feedback on various elements of the platform
model Feedback {
  id              String         @id @default(uuid())
  channel         FeedbackChannel
  content         String         @db.Text
  sentiment       Sentiment
  sourceType      FeedbackSource
  sourceId        String         // ID of the content/outreach/etc being rated
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  // Relations based on source type
  contentId       String?
  content_rel     GeneratedContent? @relation("ContentFeedback", fields: [contentId], references: [id])
  outreachTaskId  String?
  outreachTask    OutreachTask?  @relation("OutreachFeedback", fields: [outreachTaskId], references: [id])
  createdAt       DateTime       @default(now())
  
  @@index([userId])
  @@index([sentiment])
  @@index([sourceType])
  @@index([contentId])
  @@index([outreachTaskId])
}

enum FeedbackChannel {
  IN_APP
  EMAIL
  SURVEY
  SOCIAL_MEDIA
  CUSTOMER_SUPPORT
  REVIEW
}

enum Sentiment {
  VERY_NEGATIVE
  NEGATIVE
  NEUTRAL
  POSITIVE
  VERY_POSITIVE
}

enum FeedbackSource {
  CONTENT
  OUTREACH
  CAMPAIGN
  PLATFORM
  AGENT
} 