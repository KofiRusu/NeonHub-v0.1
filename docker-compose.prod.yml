version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
    networks:
      - neonhub_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G

  # Backend API Service
  backend:
    image: ${DOCKER_REGISTRY:-}neonhub-backend:${TAG:-latest}
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public
      - PORT=5000
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE=${JWT_EXPIRE:-24h}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLIENT_URL=${CLIENT_URL}
      - CORS_ORIGIN=${CORS_ORIGIN}
    networks:
      - neonhub_network
    restart: unless-stopped
    deploy:
      replicas: ${BACKEND_REPLICAS:-2}
      resources:
        limits:
          memory: 1G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    command: sh -c "npm run prisma:migrate:deploy && node dist/index.js"

  # Frontend Service
  frontend:
    image: ${DOCKER_REGISTRY:-}neonhub-frontend:${TAG:-latest}
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL}
    networks:
      - neonhub_network
    restart: unless-stopped
    deploy:
      replicas: ${FRONTEND_REPLICAS:-2}
      resources:
        limits:
          memory: 1G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certificates:/etc/nginx/certificates:ro
      - static_content:/var/www/html
    depends_on:
      - backend
      - frontend
    networks:
      - neonhub_network
    restart: unless-stopped

networks:
  neonhub_network:
    driver: bridge

volumes:
  postgres_data: {}
  static_content: {} 